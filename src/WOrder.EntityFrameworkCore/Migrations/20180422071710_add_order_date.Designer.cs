// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WOrder.Domain.Entities;
using WOrder.EntityFrameworkCore;

namespace WOrder.Migrations
{
    [DbContext(typeof(WOrderDbContext))]
    [Migration("20180422071710_add_order_date")]
    partial class add_order_date
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WOrder.Domain.Entities.Sys_Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppPage");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long>("SrcId");

                    b.Property<string>("Target");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Sys_Message");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.Sys_Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Sys_Role");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.Sys_UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Sys_UserRole");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .HasMaxLength(20);

                    b.Property<string>("AreaName")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DeptId");

                    b.Property<string>("Email")
                        .HasMaxLength(40);

                    b.Property<string>("IdCard")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Integral");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLock");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Password")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(40);

                    b.Property<string>("Photos")
                        .HasMaxLength(100);

                    b.Property<string>("Position")
                        .HasMaxLength(50);

                    b.Property<string>("Sex")
                        .HasMaxLength(10);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("WorkMode");

                    b.HasKey("Id");

                    b.HasIndex("DeptId");

                    b.ToTable("WOrder_Account");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_AttachFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Describe");

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("FilePath")
                        .IsRequired();

                    b.Property<string>("FileSize");

                    b.Property<string>("FileType")
                        .IsRequired();

                    b.Property<string>("Module");

                    b.Property<string>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("WOrder_AttachFile");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CStatus");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("WOrder_Comment");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeptNo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("InputCode")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Position")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("WOrder_Department");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DictType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Memo")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SortNo");

                    b.HasKey("Id");

                    b.ToTable("WOrder_Dictionary");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_DictType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Memo")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SortNo");

                    b.HasKey("Id");

                    b.ToTable("WOrder_DictType");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Handler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AcceptDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<long>("HandleId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("OStatus");

                    b.Property<long>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("HandleId");

                    b.HasIndex("OrderId");

                    b.ToTable("WOrder_Handler");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Integral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActDate");

                    b.Property<int>("CostType");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<decimal>("Current");

                    b.Property<int>("DeptId");

                    b.Property<string>("Describe");

                    b.Property<decimal>("Integral");

                    b.Property<string>("TypeName")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WOrder_Integral");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Position")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WOrder_Location");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CStatus");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("EDate");

                    b.Property<DateTime?>("EndDate");

                    b.Property<long?>("HandlerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Location");

                    b.Property<string>("OAddress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("OrderType");

                    b.Property<DateTime?>("SDate");

                    b.Property<string>("StartAddr");

                    b.Property<int>("TStatus");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("HandlerId");

                    b.HasIndex("LastModifierUserId");

                    b.ToTable("WOrder_Order");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditedId");

                    b.Property<string>("Category");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long>("OrderId");

                    b.HasKey("Id");

                    b.ToTable("WOrder_Relation");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ClassDate");

                    b.Property<string>("ClassType")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DFlag");

                    b.Property<string>("Description");

                    b.Property<int>("MFlag");

                    b.Property<long>("UserId");

                    b.Property<int>("YFlag");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WOrder_Schedule");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.Sys_Message", b =>
                {
                    b.HasOne("WOrder.Domain.Entities.WOrder_Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("WOrder.Domain.Entities.WOrder_Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WOrder.Domain.Entities.Sys_UserRole", b =>
                {
                    b.HasOne("WOrder.Domain.Entities.Sys_Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WOrder.Domain.Entities.WOrder_Account")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Account", b =>
                {
                    b.HasOne("WOrder.Domain.Entities.WOrder_Department", "Department")
                        .WithMany("Accounts")
                        .HasForeignKey("DeptId");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Comment", b =>
                {
                    b.HasOne("WOrder.Domain.Entities.WOrder_Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Handler", b =>
                {
                    b.HasOne("WOrder.Domain.Entities.WOrder_Account", "Handler")
                        .WithMany()
                        .HasForeignKey("HandleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WOrder.Domain.Entities.WOrder_Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Integral", b =>
                {
                    b.HasOne("WOrder.Domain.Entities.WOrder_Account", "Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Location", b =>
                {
                    b.HasOne("WOrder.Domain.Entities.WOrder_Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Order", b =>
                {
                    b.HasOne("WOrder.Domain.Entities.WOrder_Account", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("WOrder.Domain.Entities.WOrder_Account", "Handler")
                        .WithMany()
                        .HasForeignKey("HandlerId");

                    b.HasOne("WOrder.Domain.Entities.WOrder_Account", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("WOrder.Domain.Entities.WOrder_Schedule", b =>
                {
                    b.HasOne("WOrder.Domain.Entities.WOrder_Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
